# GitHub Action: Build and Publish Docker Image for AINoval

name: Build and Publish Docker Image

on:
  push:
    branches:
      - main # 或者你的主分支名
    paths:
      - 'AINovalServer/**'
      - 'AINoval/**'
      - 'deploy/open/Dockerfile'
  workflow_dispatch: # 允许手动触发

env:
  # 使用 GitHub Container Registry (ghcr.io) 存储镜像
  # 格式: ghcr.io/OWNER/IMAGE_NAME
  IMAGE_NAME: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}

jobs:
  build-and-publish:
    name: Build Docker Image and Publish to GHCR
    runs-on: ubuntu-latest

    # 授予 job 写入 package 的权限，用于推送镜像到 GHCR
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Lowercase repository name
        id: lowercase-repo
        run: echo "lowercase-repo=$(echo '${{ github.event.repository.name }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Lowercase owner name
        id: lowercase-owner
        run: echo "lowercase-owner=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      # ===== 1. 构建后端 (Java) =====
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build backend with Maven
        run: mvn -B package --file AINovalServer/pom.xml -DskipTests

      # ===== 2. 构建前端 (Flutter) =====
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Build frontend with Flutter
        run: |
          cd AINoval
          flutter pub get
          flutter build web
      
      # ===== 3. 准备构建产物给 Docker =====
      - name: Prepare artifacts for Docker build
        run: |
          mkdir -p dist/web
          cp AINovalServer/target/*.jar dist/ainoval-server.jar
          # Dockerfile COPY dist/web/ /app/web/ 需要一个非空的 web 目录
          cp -r AINoval/build/web/* dist/web/

      # ===== 4. 构建并推送 Docker 镜像 =====
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: deploy/open/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ env.lowercase-owner }}/${{ env.lowercase-repo }}:latest
            ghcr.io/${{ env.lowercase-owner }}/${{ env.lowercase-repo }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Print image digest
        run: |
          echo "Pushed image digest: ${{ steps.build-and-push.outputs.digest }}"